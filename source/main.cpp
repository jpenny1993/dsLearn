// Libraries
#include <nds.h>
#include <stdio.h>
#include <gl2d.h>

// GRIT auto-generated  files
#include "shuttle.h"

// My Includes
#include <clock.h>
#include <controller.h>

void InitHardware(void);
void InitGame(void);
void UpdateGame(void);
void RenderGame(void);

Clock rtc;
Controller ctrl;

int shuttleTextureId;
glImage Shuttle[1];

int shuttleX = 30, shuttleY = 30;

int main()
{
   consoleDemoInit();
   InitHardware();
   InitGame();

   while (1) {
      rtc.Update();

      UpdateGame();
      RenderGame();

      swiWaitForVBlank();
      ctrl.ScanKeyPresses();
   }

   return 0;
}

void InitHardware(void) {
	videoSetMode(MODE_5_3D);
	videoSetModeSub(MODE_5_2D);

   lcdMainOnBottom(); // use main renderer on bottom screen
   // lcdMainOnTop(); // use main renderer on top screen

   // setup vram usage, currently overkill copy paste
	vramSetBankA(VRAM_A_TEXTURE);
	vramSetBankB(VRAM_B_TEXTURE);
	vramSetBankC(VRAM_C_TEXTURE);
	vramSetBankD(VRAM_D_SUB_SPRITE);        // oam fonts et al
	vramSetBankH(VRAM_H_SUB_BG);            // Our sub BG
	vramSetBankI(VRAM_I_SUB_BG_0x06208000); // H + I makes 256*192
	vramSetBankF(VRAM_F_TEX_PALETTE);
}

void InitGame(void) {
	// Initialize GL2D
    glScreen2D();

	// Oam
	oamInit(&oamSub, SpriteMapping_1D_128, false);

   // Load sprite
 	shuttleTextureId = glLoadTileSet(
      Shuttle,       // pointer to glImage array
      64,            // sprite width
      64,            // sprite height
      64,            // bitmap image width
      64,            // bitmap image height
      GL_RGB16,      // texture type for glTexImage2D() in videoGL.h
      TEXTURE_SIZE_64,  // sizeX for glTexImage2D() in videoGL.h
      TEXTURE_SIZE_64,  // sizeY for glTexImage2D() in videoGL.h
      GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
      16,                  // Length of the palette to use (16 colors)
      (u16*)shuttlePal,    // Load our 256 color tiles palette
      (u8*)shuttleBitmap   // image data generated by GRIT
   );

   swiWaitForVBlank();

   oamUpdate(&oamSub);
}

void UpdateGame(void) {
   if (ctrl.Stylus.Touched()) {
      shuttleX = ctrl.Stylus.X() - 32;
      shuttleY = ctrl.Stylus.Y() - 32;
   }

   if (ctrl.A.Pressed()) {
      lcdSwap(); // switch the screen being rendered
   }
}

void RenderGame(void) {
   // Start 2D mode
   glBegin2D();

   // draw sprite at position
   glSprite(shuttleX, shuttleY, GL_FLIP_NONE, &Shuttle[0]);

   // Stop 2D rendering
   glEnd2D();
   glFlush(0);
}