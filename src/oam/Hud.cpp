#include <nds/arm9/sprite.h>
#include <cstdio>
#include <algorithm>

#include "oam/Hud.h"
#include "oam/LayerLevel.h"
#include "oam/OamManager.h"

// Autogenerated by GRIT
#include "font.h"

Hud* Hud::_instance = nullptr;

void Hud::init() {
    DEBUG_BREAKING_ASSERT(!_instance);
    _instance = new Hud();
    DEBUG_BREAKING_ASSERT(_instance);
}

void Hud::dispose() {
    DEBUG_BREAKING_ASSERT(_instance);
    delete _instance;
}

void Hud::update() {
}

Hud::Hud() {
}

void Hud::debug_oam() {
    printf("\n \n \n  IPM: %lu\n IPS: %lu\n ITM: %lu\n ITS: %lu\n NS: %d NM: %d",
           static_cast<unsigned long>(OAMManager::main().current_oam_id_palette),
           static_cast<unsigned long>(OAMManager::sub().current_oam_id_palette),
           static_cast<unsigned long>(OAMManager::main().current_oam_id_tiles),
           static_cast<unsigned long>(OAMManager::sub().current_oam_id_tiles),
           OAMManager::sub().nextAvailableTileIdx,
           OAMManager::main().nextAvailableTileIdx);
}

void Hud::clear_console() {
    consoleClear();
}

void Hud::init_console() {
    constexpr int tile_base = 2;
    constexpr int map_base = 8;

    //The default instance utilizes the sub display, approximatly 15KiB of vram C starting
    //at tile base 0 and 2KiB of map at map base 30.
    consoleInit(print_console,
               (int)LayerLevel::TOP,
               BgType_Text4bpp,
               BgSize_T_256x256,
               map_base,
               tile_base,
               true, // Main or Sub
               true);

    ConsoleFont font;
   font.gfx = (u16*)fontTiles;
   font.pal = (u16*)fontPal;
   font.numChars = 95;
   font.numColors =  fontPalLen / 2;
   font.bpp = 4;
   font.asciiOffset = 32;
   font.convertSingleColor = false;

    consoleSetFont(print_console, &font);
}
