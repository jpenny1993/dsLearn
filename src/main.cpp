// NDS Libraries
#include <nds.h>
#include <stdio.h>
#include <gl2d.h>

// GRIT auto-generated  files
#include "font.h"
#include "glfont_krom.h"
#include "shuttle.h"

// My Includes
#include "system/clock.h"
#include "input/controller.h"
#include "opengl/glfont.h"

void InitHardware(void);
void InitMain(void);
void InitSub(void);
void UpdateGame(void);
void RenderMain(void);
void RenderSub(void);

Clock rtc;
Controller ctrl;

GLFont KromGLFont;
glImage KromGLFontImages[1024 / 16];

int shuttleTextureId;
glImage shuttleImg[1];

int shuttleX = 30, shuttleY = 30;

int main() {
   const int tile_base = 0;
	const int map_base = 31;

	PrintConsole topScreen;
	PrintConsole bottomScreen;
	
	videoSetMode(MODE_0_2D);
	videoSetModeSub(MODE_0_2D);

	vramSetBankA(VRAM_A_MAIN_BG);
	vramSetBankC(VRAM_C_SUB_BG);

	consoleInit(&topScreen, 3, BgType_Text4bpp, BgSize_T_256x256, map_base, tile_base, true, true);
	consoleInit(&bottomScreen, 3, BgType_Text4bpp, BgSize_T_256x256, map_base, tile_base, false, true);

	ConsoleFont font;
	font.gfx = (u16*)fontTiles;
	font.pal = (u16*)fontPal;
	font.numChars = 95;
	font.numColors =  fontPalLen / 2;
	font.bpp = 4;
	font.asciiOffset = 32;
	font.convertSingleColor = false;
	
	consoleSetFont(&topScreen, &font);
	consoleSetFont(&bottomScreen, &font);
	
   consoleSelect(&topScreen);
	iprintf("\n\n\tHello DS dev'rs\n");
	iprintf("\twww.drunkencoders.com\n");
	iprintf("\twww.devkitpro.org");

   consoleSelect(&bottomScreen);
	iprintf("Custom Font Demo\n");
	iprintf("   by Poffy\n");
	iprintf("modified by WinterMute\n");
	iprintf("for libnds examples\n");

   while(1) {
		swiWaitForVBlank();
		ctrl.ScanKeyPresses();
		if (ctrl.A.Pressed()) break;
	}

	return 0;

   InitHardware();
   InitMain();
   InitSub();

   while (1) {
      rtc.Update();

      UpdateGame();
      RenderMain();
      swiWaitForVBlank();
      RenderSub();

      ctrl.ScanKeyPresses();
   }

   return 0;
}

void InitHardware(void) {
   // videoSetMode(MODE_5_3D);
   // videoSetModeSub(MODE_5_2D);

   // lcdMainOnBottom(); // use main renderer on bottom screen
   // // lcdMainOnTop(); // use main renderer on top screen

   // // setup vram usage, currently overkill copy paste
   // vramSetBankA(VRAM_A_TEXTURE);
   // vramSetBankB(VRAM_B_TEXTURE);
   // vramSetBankC(VRAM_C_TEXTURE);
   // vramSetBankD(VRAM_D_SUB_SPRITE);        // oam fonts et al
   // vramSetBankH(VRAM_H_SUB_BG);            // Our sub BG
   // vramSetBankI(VRAM_I_SUB_BG_0x06208000); // H + I makes 256*192
   // vramSetBankF(VRAM_F_TEX_PALETTE);
}

void InitMain(void) {
   // // Initialize GL2D
   // glScreen2D();

   // // Load sprite
   // shuttleTextureId = glLoadTileSet(
   //     shuttleImg,      // pointer to glImage array
   //     64,              // sprite width
   //     64,              // sprite height
   //     64,              // bitmap image width
   //     64,              // bitmap image height
   //     GL_RGB16,        // texture type for glTexImage2D() in videoGL.h
   //     TEXTURE_SIZE_64, // sizeX for glTexImage2D() in videoGL.h
   //     TEXTURE_SIZE_64, // sizeY for glTexImage2D() in videoGL.h
   //     GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT,
   //     16,                 // Length of the palette to use (16 colors)
   //     (u16 *)shuttlePal,  // Load our 256 color tiles palette
   //     (u8 *)shuttleBitmap // image data generated by GRIT
   // );

   // Load Font
   // KromGLFont.Load(KromGLFontImages,
   //                 16,
   //                 16,
   //                 16,
   //                 1024,
   //                 GL_RGB16,
   //                 TEXTURE_SIZE_16,
   //                 TEXTURE_SIZE_1024,
   //                 TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT,
   //                 (u8 *)glfont_kromBitmap,
   //                 16,
   //                 glfont_kromPal);
   
   oamInit(&oamMain, SpriteMapping_1D_128, false);
}

void InitSub(void) {
   oamInit(&oamSub, SpriteMapping_1D_128, false);

   // KromFont.Init(&oamSub, (u8*)font_kromTiles, 16, 16, SpriteSize_16x16, 64, 64);

   // KromGLFont.Load( KromGLFontImages,
   //          16, 
   //          16,
   //          16,
   //          1024,
   //          GL_RGB16,
   //          TEXTURE_SIZE_16,
   //          TEXTURE_SIZE_1024,
   //          TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
   //          (u8*)glfont_kromBitmap,
   //          16,
   //          glfont_kromPal );
}

void UpdateGame(void) {
   // Read player controls
   if (ctrl.Left.HeldDown()) shuttleX -= 5;
   else if (ctrl.Right.HeldDown()) shuttleX += 5;

   if (ctrl.Up.HeldDown()) shuttleY -= 2;
   else if (ctrl.Down.HeldDown()) shuttleY += 2;

   if (ctrl.Stylus.Touched()) {
      shuttleX = ctrl.Stylus.X() - 32;
      shuttleY = ctrl.Stylus.Y() - 32;
   }

   // Collide with screen borders
   if (shuttleX < 0) shuttleX = 0;
   else if (shuttleX > (255 - 64)) shuttleX = (255 - 64);

   if (shuttleY < 0) shuttleY = 0;
   else if (shuttleY > (192 - 64)) shuttleY = (192 - 64);

   // switch the screen being rendered
   if (ctrl.A.Pressed()) {
      lcdSwap();
   }
}

void RenderMain(void) {
   // // Start 2D mode
   // glBegin2D();

   // // draw sprite at position
   // glSprite(shuttleX, shuttleY, GL_FLIP_NONE, &shuttleImg[0]);

   // // Get time & print in formatted string 
   // tm time = rtc.Time();
   // char timeStr[9];
   // sprintf(timeStr, "%02d:%02d:%02d", time.tm_hour, time.tm_min, time.tm_sec);
   // KromGLFont.PrintCentered(0, 5, timeStr);

   // // Stop 2D rendering
   // glEnd2D();
   // glFlush(0);
   // oamUpdate(&oamMain);
}

void RenderSub(void) {
   oamUpdate(&oamSub);
}