// NDS Libraries
#include <nds.h>
#include <stdio.h>
#include <gl2d.h>

// GRIT auto-generated  files
#include "background.h"
#include "colours.h"
// #include "glfont_krom.h"
// #include "shuttle.h"

// My Includes
#include "GameState.h"
#include "input/Controller.h"
#include "oam/Hud.h"
#include "oam/OamManager.h"
#include "system/clock.h"
// #include "opengl/glfont.h"

void InitHardware(void);
void InitMain(void);
void InitSub(void);
void UpdateGame(void);
void RenderMain(void);
void RenderSub(void);

Clock rtc;
Controller ctrl;

int main() {
   #ifndef NDEBUG
      defaultExceptionHandler();
   #endif

   lcdMainOnBottom();

   // Setup singletons 
   GameState::init();
   OAMManager::init();
   Hud::init();

   // Setup hardware
   InitHardware();
   OAMManager::init_sprite_hardware();
   OAMManager::init_background_hardware();

   //Copy background tiles to the graphics memory
   dmaCopy(backgroundBitmap, bgGetGfxPtr(OAMManager::main()._background_id), sizeof(backgroundBitmap));
   dmaCopy(backgroundBitmap, bgGetGfxPtr(OAMManager::sub()._background_id), sizeof(backgroundBitmap));

   // Setup fonts
   Hud::instance().init_console();

   // Copy  background palette to the graphics memory
   dmaCopy(coloursPal, BG_PALETTE, coloursPalLen);
   dmaCopy(coloursPal, BG_PALETTE_SUB, coloursPalLen);

   while(1) {
      swiWaitForVBlank();
      rtc.Update();
      ctrl.ScanKeyPresses();

      tm time = rtc.Time();

      consoleSelect(Hud::instance().main_console);
      consoleClear();
      iprintf("\n\n\tHello World (main)\n");
      iprintf("\t%02d:%02d:%02d", time.tm_hour, time.tm_min, time.tm_sec);

      consoleSelect(Hud::instance().sub_console);
      consoleClear();
      iprintf("\n\n\tHello World (sub)\n");
      iprintf("\t%02d:%02d:%02d", time.tm_hour, time.tm_min, time.tm_sec);

      if (ctrl.A.Pressed()) break;
   }

   GameState::dispose();
   OAMManager::dispose();

   return 0;
}

void InitHardware(void) {
   /*  Turn on the 2D graphics core. */
   powerOn(POWER_ALL_2D);

   // Setup memory allocation for graphics
   // <https://mtheall.com/banks.html#A=MBG0&B=MOBJ0&C=SBG&D=SOBJ>
   vramSetBankA(VRAM_A_MAIN_BG_0x06000000);
   vramSetBankB(VRAM_B_MAIN_SPRITE_0x06400000);
   vramSetBankC(VRAM_C_SUB_BG_0x06200000);
   vramSetBankD(VRAM_D_SUB_SPRITE);

   /* Set the video mode on the main screen. */
	videoSetMode(MODE_0_2D |
                DISPLAY_SPR_ACTIVE |    // Turn on sprites
                DISPLAY_BG0_ACTIVE |
                DISPLAY_BG3_ACTIVE |    // Enable BG3 for display
                DISPLAY_SPR_1D_LAYOUT);

    /* Set the video mode on the sub screen. */
    videoSetModeSub(MODE_0_2D |          // Set the graphics mode to Mode 0
                    DISPLAY_SPR_ACTIVE | // Turn on sprites
                    DISPLAY_BG0_ACTIVE |
                    DISPLAY_BG3_ACTIVE); // Enable BG3 for display
}

/*
void OpenGlDemo(void) {
   GLFont KromGLFont;
   glImage KromGLFontImages[1024 / 16];

   int shuttleTextureId;
   glImage shuttleImg[1];

   int shuttleX = 30, shuttleY = 30;

   // InitHardware
   videoSetMode(MODE_5_3D);
   videoSetModeSub(MODE_5_2D);

   lcdMainOnBottom(); // use main renderer on bottom screen

   // setup vram usage, currently overkill copy paste
   vramSetBankA(VRAM_A_TEXTURE);
   vramSetBankB(VRAM_B_TEXTURE);
   vramSetBankC(VRAM_C_TEXTURE);
   vramSetBankD(VRAM_D_SUB_SPRITE);        // oam fonts et al
   vramSetBankH(VRAM_H_SUB_BG);            // Our sub BG
   vramSetBankI(VRAM_I_SUB_BG_0x06208000); // H + I makes 256*192
   vramSetBankF(VRAM_F_TEX_PALETTE);

   // Initialize GL2D
   glScreen2D();

   // Load sprite
   shuttleTextureId = glLoadTileSet(
       shuttleImg,      // pointer to glImage array
       64,              // sprite width
       64,              // sprite height
       64,              // bitmap image width
       64,              // bitmap image height
       GL_RGB16,        // texture type for glTexImage2D() in videoGL.h
       TEXTURE_SIZE_64, // sizeX for glTexImage2D() in videoGL.h
       TEXTURE_SIZE_64, // sizeY for glTexImage2D() in videoGL.h
       GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT,
       16,                 // Length of the palette to use (16 colors)
       (u16 *)shuttlePal,  // Load our 256 color tiles palette
       (u8 *)shuttleBitmap // image data generated by GRIT
   );

   Load Font
   KromGLFont.Load(KromGLFontImages,
                   16,
                   16,
                   16,
                   1024,
                   GL_RGB16,
                   TEXTURE_SIZE_16,
                   TEXTURE_SIZE_1024,
                   TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT,
                   (u8 *)glfont_kromBitmap,
                   16,
                   glfont_kromPal);

   while (1) {
      // Read player controls
      if (ctrl.Left.HeldDown()) shuttleX -= 5;
      else if (ctrl.Right.HeldDown()) shuttleX += 5;

      if (ctrl.Up.HeldDown()) shuttleY -= 2;
      else if (ctrl.Down.HeldDown()) shuttleY += 2;

      if (ctrl.Stylus.Touched()) {
         shuttleX = ctrl.Stylus.X() - 32;
         shuttleY = ctrl.Stylus.Y() - 32;
      }

      // Collide with screen borders
      if (shuttleX < 0) shuttleX = 0;
      else if (shuttleX > (255 - 64)) shuttleX = (255 - 64);

      if (shuttleY < 0) shuttleY = 0;
      else if (shuttleY > (192 - 64)) shuttleY = (192 - 64);

      // switch the screen being rendered
      if (ctrl.A.Pressed()) {
         lcdSwap();
      }

      // Start 2D mode
      glBegin2D();

      // draw sprite at position
      glSprite(shuttleX, shuttleY, GL_FLIP_NONE, &shuttleImg[0]);

      // Get time & print in formatted string 
      tm time = rtc.Time();
      char timeStr[9];
      sprintf(timeStr, "%02d:%02d:%02d", time.tm_hour, time.tm_min, time.tm_sec);
      KromGLFont.PrintCentered(0, 5, timeStr);

      // Stop 2D rendering
      glEnd2D();
      glFlush(0);
   }
}
*/